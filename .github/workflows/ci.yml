name: CI

on:
  pull_request:
    branches: [main, development]
  push:
    branches: [main, development]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db'
      NEXT_PUBLIC_BASE_URL: 'http://localhost:3000'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        id: format
        continue-on-error: true
        run: npm run format:check

      - name: Run ESLint
        id: lint
        continue-on-error: true
        run: npm run lint

      # Skip tests for now until we set them up
      # - name: Run tests
      #   run: npm test

      - name: Setup Database for Build
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE USER test WITH PASSWORD 'test';"
          sudo -u postgres psql -c "CREATE DATABASE test_db OWNER test;"

      - name: Build
        id: build
        continue-on-error: true
        run: |
          npx prisma generate
          # Skip migrations in CI for now
          # npx prisma migrate deploy
          npm run build

      - name: Comment on Commit
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create status comment
          STATUS="## üöÄ CI Build Report\n\n"
          
          # Format Check
          if [[ "${{ steps.format.outcome }}" == "success" ]]; then
            STATUS+="‚úÖ Format Check: Passed\n"
          else
            STATUS+="‚ùå Format Check: Failed\n"
            STATUS+="<details><summary>Format Check Logs</summary>\n\n\`\`\`\n${{ steps.format.outputs.stdout }}\n\`\`\`\n</details>\n\n"
          fi
          
          # Lint Check
          if [[ "${{ steps.lint.outcome }}" == "success" ]]; then
            STATUS+="‚úÖ Lint Check: Passed\n"
          else
            STATUS+="‚ùå Lint Check: Failed\n"
            STATUS+="<details><summary>Lint Check Logs</summary>\n\n\`\`\`\n${{ steps.lint.outputs.stdout }}\n\`\`\`\n</details>\n\n"
          fi
          
          # Build Check
          if [[ "${{ steps.build.outcome }}" == "success" ]]; then
            STATUS+="‚úÖ Build: Passed\n"
          else
            STATUS+="‚ùå Build: Failed\n"
            STATUS+="<details><summary>Build Logs</summary>\n\n\`\`\`\n${{ steps.build.outputs.stdout }}\n\`\`\`\n</details>\n\n"
          fi
          
          STATUS+="\nüìÖ Run at: $(date '+%Y-%m-%d %H:%M:%S')\n"
          STATUS+="\nüîó [View Run Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Post comment on commit
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/commits/${{ github.sha }}/comments \
            -f body="$STATUS"

      - name: Update PR Status
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number from event
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          # Create status comment
          STATUS="‚úÖ CI Checks Completed\n"
          STATUS+="üîç Checks Run:\n"
          STATUS+="- ‚úì Code formatting\n"
          STATUS+="- ‚úì Linting\n"
          STATUS+="- ‚úì Build\n\n"
          STATUS+="üìÖ $(date '+%Y-%m-%d %H:%M:%S')\n"

          # Add any linked issues
          BODY=$(gh pr view $PR_NUMBER --json body -q .body)
          if echo "$BODY" | grep -q "Closes #"; then
            ISSUES=$(echo "$BODY" | grep -o '#[0-9]\+' | tr -d '#')
            for ISSUE in $ISSUES; do
              STATUS+="\nüîó Linked to #$ISSUE"
              gh issue comment $ISSUE "‚úÖ CI passed in PR #$PR_NUMBER"
            done
          fi

          # Post comment
          gh pr comment $PR_NUMBER -b "$STATUS"

      - name: Check TODOs
        if: github.event_name == 'pull_request'
        run: |
          # Look for new TODOs
          TODOS=$(git diff origin/${{ github.base_ref }} | grep -B2 '^\+.*TODO')
          if [ ! -z "$TODOS" ]; then
            echo "::warning::New TODOs found in changes. Please ensure they are tracked in appropriate todo files:"
            echo "$TODOS"
          fi
