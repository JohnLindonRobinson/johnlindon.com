name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update Progress Tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all merged PRs since last release
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          merged_prs=$(gh pr list --search "merged:>$(git log -1 --format=%aI $latest_tag)" --json number,title,body --state merged)

          # Extract and update linked issues
          echo "$merged_prs" | jq -r '.[] | select(.body | contains("Closes #")) | .body' | \
          grep -o '#[0-9]\+' | while read -r issue; do
            issue_num=${issue#"#"}
            
            # Add completion comment
            comment="‚úÖ Feature deployed to production\n"
            comment+="üìÖ $(date '+%Y-%m-%d %H:%M:%S')\n"
            comment+="üîó Commit: ${GITHUB_SHA}\n"
            
            gh issue comment "$issue_num" -b "$comment"
            
            # Close issue if still open
            gh issue close "$issue_num" -c "Completed and deployed to production"
          done

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # Extract version components
          major=$(echo $latest_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          # Increment minor version for new release
          new_minor=$((minor + 1))
          new_tag="v$major.$new_minor.0"

          # Prepare release notes
          notes="# Release Notes for $new_tag\n\n"
          notes+="## üöÄ New Features & Improvements\n"

          # Get all merged PRs since last release
          merged_prs=$(gh pr list --search "merged:>$(git log -1 --format=%aI $latest_tag)" --json number,title,body,labels --state merged)

          # Categorize changes
          features=$(echo "$merged_prs" | jq -r '.[] | select(.labels[].name == "feature") | "- #\(.number) \(.title)"')
          fixes=$(echo "$merged_prs" | jq -r '.[] | select(.labels[].name == "bug") | "- #\(.number) \(.title)"')
          chores=$(echo "$merged_prs" | jq -r '.[] | select(.labels[].name == "chore") | "- #\(.number) \(.title)"')

          # Add categorized changes to notes
          if [ ! -z "$features" ]; then
            notes+="\n### ‚ú® Features\n$features\n"
          fi

          if [ ! -z "$fixes" ]; then
            notes+="\n### üêõ Bug Fixes\n$fixes\n"
          fi

          if [ ! -z "$chores" ]; then
            notes+="\n### üîß Maintenance\n$chores\n"
          fi

          # Create new tag
          git tag $new_tag
          git push origin $new_tag

          # Create GitHub release
          gh release create $new_tag \
            --title "Release $new_tag" \
            --notes "$notes"

      - name: Update TODO Lists
        run: |
          # Check for completed TODOs in merged changes
          completed_todos=$(git diff $latest_tag..HEAD | grep -B2 '^\+.*\[x\]')
          if [ ! -z "$completed_todos" ]; then
            echo "::notice::Completed TODOs found in this release. Please review and update todo files:"
            echo "$completed_todos"
          fi
